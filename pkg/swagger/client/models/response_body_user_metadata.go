// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ResponseBodyUserMetadata JSON object containing user metadata.
//
// swagger:model responseBodyUserMetadata
type ResponseBodyUserMetadata struct {

	// display name
	// Required: true
	DisplayName *string `json:"displayName"`

	// email address
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// identity provider
	// Required: true
	IdentityProvider *string `json:"identityProvider"`

	// organisational units
	// Required: true
	OrganisationalUnits []string `json:"organisationalUnits"`
}

// Validate validates this response body user metadata
func (m *ResponseBodyUserMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentityProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganisationalUnits(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResponseBodyUserMetadata) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("displayName", "body", m.DisplayName); err != nil {
		return err
	}

	return nil
}

func (m *ResponseBodyUserMetadata) validateEmail(formats strfmt.Registry) error {
	if swag.IsZero(m.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("email", "body", "email", m.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ResponseBodyUserMetadata) validateIdentityProvider(formats strfmt.Registry) error {

	if err := validate.Required("identityProvider", "body", m.IdentityProvider); err != nil {
		return err
	}

	return nil
}

func (m *ResponseBodyUserMetadata) validateOrganisationalUnits(formats strfmt.Registry) error {

	if err := validate.Required("organisationalUnits", "body", m.OrganisationalUnits); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this response body user metadata based on context it is used
func (m *ResponseBodyUserMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ResponseBodyUserMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResponseBodyUserMetadata) UnmarshalBinary(b []byte) error {
	var res ResponseBodyUserMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
