// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CollectionType collection type
//
// swagger:model collectionType
type CollectionType string

func NewCollectionType(value CollectionType) *CollectionType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated CollectionType.
func (m CollectionType) Pointer() *CollectionType {
	return &m
}

const (

	// CollectionTypeDac captures enum value "dac"
	CollectionTypeDac CollectionType = "dac"

	// CollectionTypeRdc captures enum value "rdc"
	CollectionTypeRdc CollectionType = "rdc"

	// CollectionTypeDsc captures enum value "dsc"
	CollectionTypeDsc CollectionType = "dsc"

	// CollectionTypeUnknown captures enum value "unknown"
	CollectionTypeUnknown CollectionType = "unknown"
)

// for schema
var collectionTypeEnum []interface{}

func init() {
	var res []CollectionType
	if err := json.Unmarshal([]byte(`["dac","rdc","dsc","unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		collectionTypeEnum = append(collectionTypeEnum, v)
	}
}

func (m CollectionType) validateCollectionTypeEnum(path, location string, value CollectionType) error {
	if err := validate.EnumCase(path, location, value, collectionTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this collection type
func (m CollectionType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCollectionTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this collection type based on context it is used
func (m CollectionType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
